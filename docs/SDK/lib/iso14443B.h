#ifndef _HFREADER_ISO14443B_
#define _HFREADER_ISO14443B_

#include "Serial.h"
#include "hfReader.h"
#define HFREADER_ISO14443B_CMD_ACTIVE_SELECT	0x19
#define HFREADER_ISO14443B_CMD_SELECT           0x1A
#define HFREADER_ISO14443B_CMD_GET_IDCARD_UID   0xA0
#define HFREADER_ISO14443B_CMD_HALT             0xAE
#define HFREADER_ISO14443B_CMD_DTU              0xAF 

#define HFREADER_ISO14443B_MAX_PUPI_SIZE		0x04
#define HFREADER_ISO14443B_MAX_APPLI_SIZE		0x04
#define HFREADER_ISO14443B_MAX_PROTOCOL_SIZE	0x04
typedef struct iso14443bInfo{
	HFREADER_OPRESULT result;
	UCHAR pupi[HFREADER_ISO14443B_MAX_PUPI_SIZE];
    UCHAR appField[HFREADER_ISO14443B_MAX_APPLI_SIZE];
	UCHAR protocol[HFREADER_ISO14443B_MAX_PROTOCOL_SIZE];
}ISO14443B_INFO;

#define HFREADER_ISO14443B_SIZE_UID                  8

typedef struct iso14443bDtuParam{
    HFREADER_OPRESULT result;
    UINT txLen;
    UCHAR txFrame[HFREADER_BUFFER_MAX];
    UINT rxLen;
    UCHAR rxFrame[HFREADER_BUFFER_MAX];
	UINT timeout;
}ISO14443B_DTU;

#define HFREADER_ISO14443B_TIMEOUT	500

int WINAPI iso14443BSelect(HANDLE h, USHORT srcAddr, USHORT targetAddr, UCHAR mode, ISO14443B_INFO *pInfo, UCHAR *pTxFrame, UCHAR *pRxFrame);
int WINAPI iso14443BGetIDCardUid(HANDLE h, USHORT srcAddr, USHORT targetAddr, UCHAR *pUid, HFREADER_OPRESULT *pResult, UCHAR *pTxFrame, UCHAR *pRxFrame);
int WINAPI iso14443BDtu(HANDLE h, USHORT srcAddr, USHORT targetAddr, ISO14443B_DTU *pDtu, UCHAR *pTxFrame, UCHAR *pRxFrame);
int WINAPI iso14443BHalt(HANDLE h, USHORT srcAddr, USHORT targetAddr, HFREADER_OPRESULT *pResult, UCHAR *pTxFrame, UCHAR *pRxFrame);
#endif
